/* WallsSrvFileParser.java */
/* Generated By:JavaCC: Do not edit this line. WallsSrvFileParser.java */
package org.andork.breakout.wallsimport;
import static org.andork.breakout.wallsimport.CardinalDirection.*;
import java.util.*;
import java.nio.file.*;
import java.nio.channels.*;
import org.andork.breakout.table.SurveyModel;
import org.andork.i18n.I18n.*;
import org.andork.q2.*;
import org.andork.swing.async.Subtask;
import java.io.*;
import org.andork.unit.*;
import org.andork.breakout.wallsimport.WallsImportStatusMessage.Severity;

public class WallsSrvFileParser implements WallsSrvFileParserConstants {
  WallsState state;
  int currentLine;
  int blockCommentLevel;

  private String requireNoDuplicateLetters(String lcLetters)
  {
    BitSet b = new BitSet(26);
    for (int i = 0; i < lcLetters.length(); i++)
    {
      int index = lcLetters.charAt(i) - 'a';
      if (b.get(index))
      {
        throw new IllegalArgumentException("string has duplicate letters");
      }
      b.set(index);
    }
    return lcLetters;
  }

  private CardinalDirection parseCardinalDirection(Token token)
  {
    switch (token.image.charAt(0))
    {
      case 'n' : case 'N' : return CardinalDirection.NORTH;
      case 's' : case 'S' : return CardinalDirection.SOUTH;
      case 'e' : case 'E' : return CardinalDirection.EAST;
      case 'w' : case 'W' : return CardinalDirection.WEST;
      default : throw new IllegalArgumentException("token must be a cardinal direction");
    }
  }

  final private void SrvFile() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHITESPACE:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Line();
    }
  }

  final private void Line() throws ParseException {
    jj_consume_token(WHITESPACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DUNITS:{
      UnitsLine();
      break;
      }
    case END_COMMENT:{
      CommentLine();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EOL);
  }

  final private void UnitsLine() throws ParseException {
    jj_consume_token(DUNITS);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHITESPACE:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(WHITESPACE);
      UnitsOption();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case END_COMMENT:{
      jj_consume_token(END_COMMENT);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final private void CommentLine() throws ParseException {
    jj_consume_token(END_COMMENT);
  }

  final private void UnitsOption() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case METERS:
    case FEET:{
      LengthUnitOption();
      break;
      }
    case D:{
      D_Option();
      break;
      }
    case S:{
      S_Option();
      break;
      }
    case A:
    case AB:{
      A_AB_Option();
      break;
      }
    case V:
    case VB:{
      V_VB_Option();
      break;
      }
    case ORDER:{
      OrderOption();
      break;
      }
    case INCA:
    case INCAB:{
      INCA_AB_Option();
      break;
      }
    case DECL:{
      DECL_Option();
      break;
      }
    case GRID:{
      GRID_Option();
      break;
      }
    case RECT:{
      RECT_Option();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void DECL_Option() throws ParseException {UnitizedDouble < Angle > angle;
    jj_consume_token(DECL);
    jj_consume_token(EQUALS);
    angle = AzimuthNonQuadrant();
state.units.decl = angle;
  }

  final private void GRID_Option() throws ParseException {UnitizedDouble < Angle > angle;
    jj_consume_token(GRID);
    jj_consume_token(EQUALS);
    angle = AzimuthNonQuadrant();
state.units.grid = angle;
  }

  final private void RECT_Option() throws ParseException {UnitizedDouble < Angle > angle;
    jj_consume_token(RECT);
    jj_consume_token(EQUALS);
    angle = AzimuthNonQuadrant();
state.units.rect = angle;
  }

  final private void OrderOption() throws ParseException {String order;
    jj_consume_token(ORDER);
    jj_consume_token(EQUALS);
    order = Order();
state.units.order = order;
  }

  final private void LengthUnitOption() throws ParseException {Unit < Length > lengthUnit;
    lengthUnit = LengthUnit();
state.units.d_unit = state.units.s_unit = lengthUnit;
  }

  final private void D_Option() throws ParseException {Unit < Length > lengthUnit;
    jj_consume_token(D);
    jj_consume_token(EQUALS);
    lengthUnit = LengthUnit();
state.units.d_unit = lengthUnit;
  }

  final private void S_Option() throws ParseException {Unit < Length > lengthUnit;
    jj_consume_token(S);
    jj_consume_token(EQUALS);
    lengthUnit = LengthUnit();
state.units.s_unit = lengthUnit;
  }

  final private void INCA_AB_Option() throws ParseException {UnitizedDouble < Angle > angle;
  Token abToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCA:{
      jj_consume_token(INCA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
        angle = Azimuth();
        break;
        }
      case FSLASH:{
        jj_consume_token(FSLASH);
        abToken = jj_consume_token(AB);
        jj_consume_token(EQUALS);
        angle = Azimuth();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
state.units.inca = angle;
    if (abToken != null)
    {
      state.units.incab = angle;
    }
      break;
      }
    case INCAB:{
      jj_consume_token(INCAB);
      jj_consume_token(EQUALS);
      angle = Azimuth();
state.units.incab = angle;
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void A_AB_Option() throws ParseException {Unit < Angle > unit;
  Token abToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case A:{
      jj_consume_token(A);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
        unit = AzimuthUnit();
        break;
        }
      case FSLASH:{
        jj_consume_token(FSLASH);
        abToken = jj_consume_token(AB);
        jj_consume_token(EQUALS);
        unit = AzimuthUnit();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
state.units.a_unit = unit;
    if (abToken != null)
    {
      state.units.ab_unit = unit;
    }
      break;
      }
    case AB:{
      jj_consume_token(AB);
      jj_consume_token(EQUALS);
      unit = AzimuthUnit();
state.units.ab_unit = unit;
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void V_VB_Option() throws ParseException {Unit < Angle > unit;
  Token vbToken = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case V:{
      jj_consume_token(V);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALS:{
        jj_consume_token(EQUALS);
        unit = InclinationUnit();
        break;
        }
      case FSLASH:{
        jj_consume_token(FSLASH);
        vbToken = jj_consume_token(VB);
        jj_consume_token(EQUALS);
        unit = InclinationUnit();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
state.units.v_unit = unit;
    if (vbToken != null)
    {
      state.units.vb_unit = unit;
    }
      break;
      }
    case VB:{
      jj_consume_token(VB);
      jj_consume_token(EQUALS);
      unit = InclinationUnit();
state.units.vb_unit = unit;
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private String Order() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DAV_ORDER:{
      t = jj_consume_token(DAV_ORDER);
      break;
      }
    case ENU_ORDER:{
      t = jj_consume_token(ENU_ORDER);
{if ("" != null) return requireNoDuplicateLetters(t.image.toLowerCase());}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private String Name() throws ParseException {Token t;
    t = jj_consume_token(NONWHITESPACE);
for (int i = 0; i < t.image.length(); i++)
    {
      if (!Character.isLetter(t.image.charAt(i)) && !Character.isDigit(t.image.charAt(i)))
      {
        state.statusMessages.add(new WallsImportStatusMessage(state.localizer.getFormattedString("invalidCharInName", t.image.charAt(i)), Severity.FATAL, state.currentFilePath, t.beginLine, t.beginColumn));
        {if (true) throw new WallsImportFailedException();}
      }
    }
    {if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final private int UnsignedIntegral() throws ParseException {Token t;
    t = jj_consume_token(UNSIGNED_INTEGRAL);
{if ("" != null) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private int SignedIntegral() throws ParseException {Token t;
    t = jj_consume_token(SIGNED_INTEGRAL);
{if ("" != null) return Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private double UnsignedFloatingPoint() throws ParseException {Token t;
    t = jj_consume_token(UNSIGNED_FLOATING_POINT);
{if ("" != null) return Double.parseDouble(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private double SignedFloatingPoint() throws ParseException {Token t;
    t = jj_consume_token(SIGNED_FLOATING_POINT);
{if ("" != null) return Double.parseDouble(t.image);}
    throw new Error("Missing return statement in function");
  }

  final private Unit < Length > LengthUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case METERS:{
      jj_consume_token(METERS);
{if ("" != null) return Length.meters;}
      break;
      }
    case FEET:{
      jj_consume_token(FEET);
{if ("" != null) return Length.feet;}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Unit < Angle > AzimuthUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEGREES:{
      jj_consume_token(DEGREES);
{if ("" != null) return Angle.degrees;}
      break;
      }
    case GRADS:{
      jj_consume_token(GRADS);
{if ("" != null) return Angle.gradians;}
      break;
      }
    case MILS:{
      jj_consume_token(MILS);
{if ("" != null) return Angle.milsNATO;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Unit < Angle > InclinationUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEGREES:{
      jj_consume_token(DEGREES);
{if ("" != null) return Angle.degrees;}
      break;
      }
    case GRADS:{
      jj_consume_token(GRADS);
{if ("" != null) return Angle.gradians;}
      break;
      }
    case MILS:{
      jj_consume_token(MILS);
{if ("" != null) return Angle.milsNATO;}
      break;
      }
    case PERCENT:{
      jj_consume_token(PERCENT);
{if ("" != null) return Angle.percentGrade;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private double Minutes() throws ParseException {Token t;
    t = jj_consume_token(UNSIGNED_FLOATING_POINT);
double value = Double.parseDouble(t.image);
    if (value < 0.0 || value > 60.0)
    {
      state.statusMessages.add(new WallsImportStatusMessage(state.localizer.getString("minutesOutOfRange"), Severity.ERROR, state.currentFilePath, t.beginLine, t.beginColumn));
      {if (true) throw new RuntimeException("value out of range");}
    }
    {if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final private double Seconds() throws ParseException {Token t;
    t = jj_consume_token(UNSIGNED_FLOATING_POINT);
double value = Double.parseDouble(t.image);
    if (value < 0.0 || value > 60.0)
    {
      state.statusMessages.add(new WallsImportStatusMessage(state.localizer.getString("secondsOutOfRange"), Severity.ERROR, state.currentFilePath, t.beginLine, t.beginColumn));
      {if (true) throw new RuntimeException("value out of range");}
    }
    {if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final private UnitizedDouble < Angle > AzimuthDefaultOrDMS() throws ParseException {double value = 0.0;
  Unit < Angle > unit = null;
  Double degrees = 0.0;
  Double minutes = 0.0;
  Double seconds = 0.0;
    value = UnsignedFloatingPoint();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:
    case D:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case D:{
        unit = AzimuthUnitSuffix();
        break;
        }
      case COLON:{
        jj_consume_token(COLON);
        minutes = Minutes();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COLON:{
          jj_consume_token(COLON);
          seconds = Seconds();
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
if (minutes != null)
    {
      value += minutes / 60.0;
    }
    if (seconds != null)
    {
      value += seconds / 360.0;
    }
    {if ("" != null) return new UnitizedDouble < Angle > (value, unit != null ? unit : state.units.a_unit);}
    throw new Error("Missing return statement in function");
  }

  final private UnitizedDouble < Angle > AzimuthDegreesOrDMS() throws ParseException {double value = 0.0;
  Double minutes = 0.0;
  Double seconds = 0.0;
    value = UnsignedFloatingPoint();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:{
      jj_consume_token(COLON);
      minutes = Minutes();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
        seconds = Seconds();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
if (minutes != null)
    {
      value += minutes / 60.0;
    }
    if (seconds != null)
    {
      value += seconds / 360.0;
    }
    {if ("" != null) return new UnitizedDouble < Angle > (value, Angle.degrees);}
    throw new Error("Missing return statement in function");
  }

  final private UnitizedDouble < Angle > AzimuthMS() throws ParseException {double value = 0.0;
  Double minutes = 0.0;
  Double seconds = 0.0;
    jj_consume_token(COLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNSIGNED_FLOATING_POINT:{
      minutes = Minutes();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
        seconds = Seconds();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
      }
    case COLON:{
      jj_consume_token(COLON);
      seconds = Seconds();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (minutes != null)
    {
      value += minutes / 60.0;
    }
    if (seconds != null)
    {
      value += seconds / 360.0;
    }
    {if ("" != null) return new UnitizedDouble < Angle > (value, Angle.degrees);}
    throw new Error("Missing return statement in function");
  }

  final private UnitizedDouble < Angle > AzimuthQuadrant() throws ParseException {UnitizedDouble < Angle > rotation = null;
  Token fromToken = null;
  Token toToken = null;
  CardinalDirection from = null;
  CardinalDirection to = null;
    fromToken = jj_consume_token(CARDINAL_DIRECTION);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COLON:
    case UNSIGNED_FLOATING_POINT:{
      rotation = AzimuthDegrees();
      toToken = jj_consume_token(CARDINAL_DIRECTION);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
from = parseCardinalDirection(fromToken);
    if (toToken == null)
    {
      switch (from)
      {
        case NORTH : {if ("" != null) return new UnitizedDouble < Angle > (0.0, Angle.degrees);}
        case SOUTH : {if ("" != null) return new UnitizedDouble < Angle > (90.0, Angle.degrees);}
        case EAST : {if ("" != null) return new UnitizedDouble < Angle > (180.0, Angle.degrees);}
        case WEST : {if ("" != null) return new UnitizedDouble < Angle > (270.0, Angle.degrees);}
      }
    }
    to = parseCardinalDirection(toToken);
    if ((from == NORTH || from == SOUTH) == (to == NORTH || to == SOUTH))
    {
      state.statusMessages.add(new WallsImportStatusMessage(state.localizer.getString("invalidDirectionPair"), Severity.ERROR, state.currentFilePath, toToken.beginLine, toToken.beginColumn));
      {if (true) throw new RuntimeException("invalid direction pair");}
    }
    switch (from)
    {
      case NORTH : {if ("" != null) return to == EAST ? rotation : new UnitizedDouble < Angle > (- rotation.doubleValue(Angle.degrees), Angle.degrees);}
      case SOUTH : {if ("" != null) return to == EAST ? new UnitizedDouble < Angle > (180.0 - rotation.doubleValue(Angle.degrees), Angle.degrees) : new UnitizedDouble < Angle > (180.0 + rotation.doubleValue(Angle.degrees), Angle.degrees);}
      case EAST : {if ("" != null) return to == NORTH ? new UnitizedDouble < Angle > (90.0 - rotation.doubleValue(Angle.degrees), Angle.degrees) : new UnitizedDouble < Angle > (90.0 + rotation.doubleValue(Angle.degrees), Angle.degrees);}
      case WEST : {if ("" != null) return to == NORTH ? new UnitizedDouble < Angle > (270.0 + rotation.doubleValue(Angle.degrees), Angle.degrees) : new UnitizedDouble < Angle > (270.0 - rotation.doubleValue(Angle.degrees), Angle.degrees);}
    }
    throw new Error("Missing return statement in function");
  }

  final private UnitizedDouble < Angle > AzimuthDegrees() throws ParseException {UnitizedDouble < Angle > azimuth = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNSIGNED_FLOATING_POINT:{
      azimuth = AzimuthDegreesOrDMS();
      break;
      }
    case COLON:{
      azimuth = AzimuthMS();
{if ("" != null) return azimuth;}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private UnitizedDouble < Angle > Azimuth() throws ParseException {UnitizedDouble < Angle > azimuth = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNSIGNED_FLOATING_POINT:{
      azimuth = AzimuthDefaultOrDMS();
      break;
      }
    case COLON:{
      azimuth = AzimuthMS();
      break;
      }
    case CARDINAL_DIRECTION:{
      azimuth = AzimuthQuadrant();
{if ("" != null) return azimuth;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private UnitizedDouble < Angle > AzimuthNonQuadrant() throws ParseException {UnitizedDouble < Angle > azimuth = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case UNSIGNED_FLOATING_POINT:{
      azimuth = AzimuthDefaultOrDMS();
      break;
      }
    case COLON:{
      azimuth = AzimuthMS();
{if ("" != null) return azimuth;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Unit < Angle > AzimuthUnitSuffix() throws ParseException {
    jj_consume_token(D);
{if ("" != null) return Angle.degrees;}
    jj_consume_token(M);
{if ("" != null) return Angle.milsNATO;}
    jj_consume_token(G);
{if ("" != null) return Angle.gradians;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public WallsSrvFileParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0xc00,0x100,0x400,0x96000000,0x10,0x0,0x10,0x0,0x10,0x0,0x0,0x6000000,0xe00000,0x1e00000,0x8,0x80000008,0x80000008,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x1be40180,0x20000,0x18000000,0x20000,0x200080,0x20000,0x400100,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,};
   }

  /** Constructor with InputStream. */
  public WallsSrvFileParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WallsSrvFileParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WallsSrvFileParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public WallsSrvFileParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WallsSrvFileParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public WallsSrvFileParser(WallsSrvFileParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(WallsSrvFileParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[94];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 94; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
